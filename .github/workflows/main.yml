name: Java CI with Maven

on:
  push:
    branches:
      - 'master'
      - 'feature/*'
  pull_request:
    branches:
      - 'master'
      - 'feature/*'
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

    # Check if release already exists
    - name: Get Release ID
      id: get_release_id
      uses: actions/github-script@v3
      with:
        script: |
          const release = await github.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: 'v1.0.0'
          });
          return release.data.id;

    # Update existing release
    - name: Update Release
      if: success()
      uses: actions/github-script@v3
      with:
        script: |
          await github.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: steps.get_release_id.outputs.id,
            tag_name: 'v1.0.0',
            release_name: 'Release ${{ github.sha }}',
            draft: false,
            prerelease: false
          });

    # Create new release if it doesn't exist
    - name: Create Release
      if: failure()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.0
        release_name: Release ${{ github.sha }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./target/your-project.jar
        asset_name: your-project.jar
        asset_content_type: application/java-archive
